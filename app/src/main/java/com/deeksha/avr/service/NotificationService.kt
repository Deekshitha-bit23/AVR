package com.deeksha.avr.service

import android.util.Log
import com.deeksha.avr.model.Notification
import com.deeksha.avr.model.NotificationType
import com.deeksha.avr.model.Project
import com.deeksha.avr.model.User
import com.deeksha.avr.repository.NotificationRepository
import com.deeksha.avr.repository.ProjectRepository
import com.deeksha.avr.repository.AuthRepository
import com.deeksha.avr.repository.TemporaryApproverRepository
import com.google.firebase.Timestamp
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class NotificationService @Inject constructor(
    private val notificationRepository: NotificationRepository,
    private val authRepository: AuthRepository,
    private val firestore: FirebaseFirestore
) {
    
    /**
     * Send expense submission notification to project approvers and production heads
     */
    suspend fun sendExpenseSubmissionNotification(
        projectId: String,
        expenseId: String,
        submittedBy: String,
        amount: Double,
        category: String
    ): Result<Unit> {
        return try {
            Log.d("NotificationService", "üîÑ Sending expense submission notification for project: $projectId, expense: $expenseId")
            
            // Get project details directly from Firestore
            val projectDoc = firestore.collection("projects").document(projectId).get().await()
            if (!projectDoc.exists()) {
                Log.e("NotificationService", "‚ùå Project not found: $projectId")
                return Result.failure(Exception("Project not found"))
            }
            
            val projectData = projectDoc.data ?: return Result.failure(Exception("Project data is null"))
            val projectName = projectData["name"] as? String ?: "Unknown Project"
            val approverIds = projectData["approverIds"] as? List<String> ?: emptyList()
            val productionHeadIds = projectData["productionHeadIds"] as? List<String> ?: emptyList()
            val managerId = projectData["managerId"] as? String ?: ""
            
            Log.d("NotificationService", "üìã Project: $projectName")
            Log.d("NotificationService", "üìã Project approverIds: $approverIds")
            Log.d("NotificationService", "üìã Project productionHeadIds: $productionHeadIds")
            Log.d("NotificationService", "üìã Project managerId: $managerId")
            
            // Get all users to find approvers and production heads
            val allUsers = authRepository.getAllUsers()
            Log.d("NotificationService", "üìã Total users found: ${allUsers.size}")
            
            // Collect approver and production head IDs
            val approverIdsList = mutableListOf<String>()
            val productionHeadIdsList = mutableListOf<String>()

            // Add project-specific approvers
            approverIds.forEach { approverId ->
                Log.d("NotificationService", "üîç Checking approver ID: $approverId")
                val user = allUsers.find { it.phone == approverId }
                if (user?.role == com.deeksha.avr.model.UserRole.APPROVER) {
                    approverIdsList.add(approverId)
                    Log.d("NotificationService", "‚úÖ Added approver: ${user.name} (${user.uid})")
                } else {
                    Log.w("NotificationService", "‚ö†Ô∏è User not found or not approver: $approverId")
                }
            }
            
            // Add project-specific production heads
            productionHeadIds.forEach { productionHeadId ->
                Log.d("NotificationService", "üîç Checking production head ID: $productionHeadId")
                val user = allUsers.find { it.uid == productionHeadId }
                if (user?.role == com.deeksha.avr.model.UserRole.PRODUCTION_HEAD) {
                    productionHeadIdsList.add(productionHeadId)
                    Log.d("NotificationService", "‚úÖ Added production head: ${user.name} (${user.uid})")
                } else {
                    Log.w("NotificationService", "‚ö†Ô∏è User not found or not production head: $productionHeadId")
                }
            }
            
            // Add project manager as approver if not already included
            if (managerId.isNotEmpty() && !approverIds.contains(managerId)) {
                Log.d("NotificationService", "üîç Checking manager ID: $managerId")
                val manager = allUsers.find { it.phone == managerId }
                if (manager?.role == com.deeksha.avr.model.UserRole.APPROVER) {
                    approverIdsList.add(managerId)
                    Log.d("NotificationService", "‚úÖ Added manager as approver: ${manager.name} (${manager.uid})")
                } else {
                    Log.w("NotificationService", "‚ö†Ô∏è Manager not found or not approver: $managerId")
                }
            }
            
            Log.d("NotificationService", "üìã Final: ${approverIdsList.size} approvers and ${productionHeadIdsList.size} production heads")
            
            // If no approvers or production heads found, log a warning
            if (approverIdsList.isEmpty() && productionHeadIdsList.isEmpty()) {
                Log.w("NotificationService", "‚ö†Ô∏è No approvers or production heads found for project: $projectName")
                Log.w("NotificationService", "‚ö†Ô∏è This means notifications won't be sent to anyone!")
                
                // TEMPORARY FIX: Send to all approvers and production heads if project-specific ones are not set
                Log.d("NotificationService", "üîÑ Using fallback: sending to all approvers and production heads")
                
                allUsers.forEach { user ->
                    when (user.role) {
                        com.deeksha.avr.model.UserRole.APPROVER -> {
                            if (!approverIdsList.contains(user.uid)) {
                                val firestore = FirebaseFirestore.getInstance()

                                firestore.collection("users")
                                    .whereEqualTo("uid", user.uid)
                                    .get()
                                    .addOnSuccessListener { querySnapshot ->
                                        if (!querySnapshot.isEmpty) {
                                            val document = querySnapshot.documents[0]
                                            val phoneNumber = document.getString("phoneNumber")
                                            Log.d("UserPhone", "üì± Approver phone number: $phoneNumber")
                                            if (phoneNumber != null) { approverIdsList.add(phoneNumber) }
                                            Log.d("NotificationService", "‚úÖ Added fallback approver: ${user.name} (${user.uid})")
                                        } else {
                                            Log.w("UserPhone", "‚ö†Ô∏è No user found with UID: $user.uid")
                                        }
                                    }
                                    .addOnFailureListener { e ->
                                        Log.e("UserPhone", "‚ùå Error getting phone number: ${e.message}")
                                    }

                            }
                        }
                        com.deeksha.avr.model.UserRole.PRODUCTION_HEAD -> {
                            if (!productionHeadIdsList.contains(user.uid)) {
                                 productionHeadIdsList.add(user.uid)
                                Log.d("NotificationService", "‚úÖ Added fallback production head: ${user.name} (${user.uid})")
                            }
                        }
                        else -> {}
                    }
                }
                
                Log.d("NotificationService", "üìã After fallback: ${approverIdsList.size} approvers and ${productionHeadIdsList.size} production heads")
            }
            
            // Send notifications to approvers
            approverIdsList.forEach { approverId ->
                if (approverId.isNotEmpty()) {


                    val notification = Notification(
                        recipientId = approverId,
                        recipientRole = "APPROVER",
                        title = "New Expense Submitted",
                        message = "New expense of ‚Çπ${String.format("%.2f", amount)} submitted by $submittedBy in ${projectName} (Category: $category)",
                        type = NotificationType.EXPENSE_SUBMITTED,
                        projectId = projectId,
                        projectName = projectName,
                        relatedId = expenseId,
                        actionRequired = true,
                        navigationTarget = "pending_approvals/$projectId"
                    )

                    notificationRepository.createNotification(notification).onSuccess { notificationId ->
                        Log.d("NotificationService", "‚úÖ Sent notification to approver $approverId: $notificationId")
                    }.onFailure { error ->
                        Log.e("NotificationService", "‚ùå Failed to send notification to approver $approverId: ${error.message}")
                    }
                } else {
                    Log.w("NotificationService", "‚ö†Ô∏è Skipping notification for empty approver ID")
                }
            }

            // Send notifications to production heads
            productionHeadIdsList.forEach { productionHeadId ->
                if (productionHeadId.isNotEmpty()) {
                    val notification = Notification(
                        recipientId = productionHeadId,
                        recipientRole = "PRODUCTION_HEAD",
                        title = "New Expense Submitted",
                        message = "New expense of ‚Çπ${String.format("%.2f", amount)} submitted by $submittedBy in ${projectName} (Category: $category)",
                        type = NotificationType.EXPENSE_SUBMITTED,
                        projectId = projectId,
                        projectName = projectName,
                        relatedId = expenseId,
                        actionRequired = true,
                        navigationTarget = "pending_approvals/$projectId"
                    )
                    
                    notificationRepository.createNotification(notification).onSuccess { notificationId ->
                        Log.d("NotificationService", "‚úÖ Sent notification to production head $productionHeadId: $notificationId")
                    }.onFailure { error ->
                        Log.e("NotificationService", "‚ùå Failed to send notification to production head $productionHeadId: ${error.message}")
                    }
                } else {
                    Log.w("NotificationService", "‚ö†Ô∏è Skipping notification for empty production head ID")
                }
            }
            
            // TODO: Send push notifications via FCM
            // For now, we're only storing in Firestore
            // In a real implementation, you would send FCM messages here
            
            Log.d("NotificationService", "‚úÖ Successfully sent expense submission notifications")
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e("NotificationService", "‚ùå Error sending expense submission notification: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * Send expense approval/rejection notification to the user who submitted the expense
     */
    suspend fun sendExpenseStatusNotification(
        expenseId: String,
        projectId: String,
        submittedByUserId: String,
        isApproved: Boolean,
        amount: Double,
        reviewerName: String,
        comments: String = ""
    ): Result<Unit> {
        return try {
            Log.d("NotificationService", "üîÑ Sending expense status notification for expense: $expenseId")
            Log.d("NotificationService", "üìã Submitted by user ID: $submittedByUserId")
            Log.d("NotificationService", "üìã Reviewer name: $reviewerName")
            Log.d("NotificationService", "üìã Amount: $amount")
            Log.d("NotificationService", "üìã Is approved: $isApproved")
            
            // Get project details directly from Firestore
            val projectDoc = firestore.collection("projects").document(projectId).get().await()
            if (!projectDoc.exists()) {
                Log.e("NotificationService", "‚ùå Project not found: $projectId")
                return Result.failure(Exception("Project not found"))
            }
            
            val projectData = projectDoc.data ?: return Result.failure(Exception("Project data is null"))
            val projectName = projectData["name"] as? String ?: "Unknown Project"
            
            // Get user details to include in notification
            val allUsers = authRepository.getAllUsers()
            val submittedByUser = allUsers.find { it.uid == submittedByUserId }
            val submittedByUserName = submittedByUser?.name ?: "User"
            
            Log.d("NotificationService", "üìã Found user: $submittedByUserName (ID: $submittedByUserId)")
            
            // Create more detailed notification message
            val notificationTitle = if (isApproved) "‚úÖ Expense Approved" else "‚ùå Expense Rejected"
            val notificationMessage = if (isApproved) {
                "Your expense of ‚Çπ${String.format("%.2f", amount)} in ${projectName} has been approved by $reviewerName"
            } else {
                val baseMessage = "Your expense of ‚Çπ${String.format("%.2f", amount)} in ${projectName} has been rejected by $reviewerName"
                if (comments.isNotEmpty()) {
                    "$baseMessage - Reason: $comments"
                } else {
                    baseMessage
                }
            }
            
            Log.d("NotificationService", "üìã Notification title: $notificationTitle")
            Log.d("NotificationService", "üìã Notification message: $notificationMessage")
            
            val notification = Notification(
                recipientId = submittedByUserId,
                recipientRole = "USER",
                title = notificationTitle,
                message = notificationMessage,
                type = if (isApproved) NotificationType.EXPENSE_APPROVED else NotificationType.EXPENSE_REJECTED,
                projectId = projectId,
                projectName = projectName,
                relatedId = expenseId,
                actionRequired = false, // User doesn't need to take action, just informational
                navigationTarget = "expense_list/$projectId" // Navigate to expense list for the specific project
            )
            
            // Validate that recipient ID is not empty
            if (submittedByUserId.isEmpty()) {
                Log.e("NotificationService", "‚ùå Cannot send notification: recipient ID is empty")
                return Result.failure(Exception("Recipient ID is empty"))
            }
            
            notificationRepository.createNotification(notification).onSuccess { notificationId ->
                Log.d("NotificationService", "‚úÖ Successfully sent expense status notification to $submittedByUserName: $notificationId")
                Log.d("NotificationService", "‚úÖ Notification details: title='$notificationTitle', message='$notificationMessage'")
                Log.d("NotificationService", "‚úÖ Navigation target: ${notification.navigationTarget}")
            }.onFailure { error ->
                Log.e("NotificationService", "‚ùå Failed to send expense status notification to $submittedByUserId: ${error.message}")
            }
            
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e("NotificationService", "‚ùå Error sending expense status notification: ${e.message}")
            e.printStackTrace()
            Result.failure(e)
        }
    }
    
    /**
     * Send project assignment notification
     */
    suspend fun sendProjectAssignmentNotification(
        projectId: String,
        userId: String,
        assignedRole: String
    ): Result<Unit> {
        return try {
            Log.d("NotificationService", "üîÑ Sending project assignment notification for user: $userId")
            
            // Get project details directly from Firestore
            val projectDoc = firestore.collection("projects").document(projectId).get().await()
            if (!projectDoc.exists()) {
                Log.e("NotificationService", "‚ùå Project not found: $projectId")
                return Result.failure(Exception("Project not found"))
            }
            
            val projectData = projectDoc.data ?: return Result.failure(Exception("Project data is null"))
            val projectName = projectData["name"] as? String ?: "Unknown Project"
            
            // Get user details
            val user = authRepository.getAllUsers().find { it.uid == userId }
            if (user == null) {
                Log.e("NotificationService", "‚ùå User not found: $userId")
                return Result.failure(Exception("User not found"))
            }
            
            val notification = Notification(
                recipientId = userId,
                recipientRole = user.role.name,
                title = "New Project Assignment",
                message = "You have been assigned as $assignedRole to project: ${projectName}",
                type = NotificationType.PROJECT_ASSIGNMENT,
                projectId = projectId,
                projectName = projectName,
                actionRequired = true,
                navigationTarget = when (user.role) {
                    com.deeksha.avr.model.UserRole.USER -> "user_project_dashboard/$projectId"
                    com.deeksha.avr.model.UserRole.APPROVER -> "approver_project_dashboard/$projectId"
                    com.deeksha.avr.model.UserRole.PRODUCTION_HEAD -> "production_head_project_dashboard/$projectId"
                    else -> "project_selection"
                }
            )
            
            notificationRepository.createNotification(notification).onSuccess { notificationId ->
                Log.d("NotificationService", "‚úÖ Sent project assignment notification: $notificationId")
            }.onFailure { error ->
                Log.e("NotificationService", "‚ùå Failed to send project assignment notification: ${error.message}")
            }
            
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e("NotificationService", "‚ùå Error sending project assignment notification: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * Send pending approval notification to production heads
     */
    suspend fun sendPendingApprovalNotification(
        projectId: String,
        pendingCount: Int
    ): Result<Unit> {
        return try {
            Log.d("NotificationService", "üîÑ Sending pending approval notification for project: $projectId")
            
            // Get project details directly from Firestore
            val projectDoc = firestore.collection("projects").document(projectId).get().await()
            if (!projectDoc.exists()) {
                Log.e("NotificationService", "‚ùå Project not found: $projectId")
                return Result.failure(Exception("Project not found"))
            }
            
            val projectData = projectDoc.data ?: return Result.failure(Exception("Project data is null"))
            val projectName = projectData["name"] as? String ?: "Unknown Project"
            val productionHeadIds = projectData["productionHeadIds"] as? List<String> ?: emptyList()
            
            // Get all users to find production heads
            val allUsers = authRepository.getAllUsers()
            
            // Send to project-specific production heads
            productionHeadIds.forEach { productionHeadId ->
                val user = allUsers.find { it.uid == productionHeadId }
                if (user?.role == com.deeksha.avr.model.UserRole.PRODUCTION_HEAD) {
                    val notification = Notification(
                        recipientId = productionHeadId,
                        recipientRole = "PRODUCTION_HEAD",
                        title = "Pending Approvals",
                        message = "$pendingCount expenses awaiting approval in ${projectName}",
                        type = NotificationType.PENDING_APPROVAL,
                        projectId = projectId,
                        projectName = projectName,
                        actionRequired = true,
                        navigationTarget = "pending_approvals/$projectId"
                    )
                    
                    notificationRepository.createNotification(notification).onSuccess { notificationId ->
                        Log.d("NotificationService", "‚úÖ Sent pending approval notification to production head $productionHeadId: $notificationId")
                    }.onFailure { error ->
                        Log.e("NotificationService", "‚ùå Failed to send pending approval notification to production head $productionHeadId: ${error.message}")
                    }
                }
            }
            
            Result.success(Unit)
            
        } catch (e: Exception) {
            Log.e("NotificationService", "‚ùå Error sending pending approval notification: ${e.message}")
            Result.failure(e)
        }
    }
    
    /**
     * Send a generic notification
     */
    suspend fun sendNotification(notification: Notification): Result<Unit> {
        return try {
            Log.d("NotificationService", "üîÑ Sending notification: ${notification.title}")
            Log.d("NotificationService", "üìã Notification details:")
            Log.d("NotificationService", "   - recipientId: ${notification.recipientId}")
            Log.d("NotificationService", "   - recipientRole: ${notification.recipientRole}")
            Log.d("NotificationService", "   - type: ${notification.type}")
            Log.d("NotificationService", "   - projectId: ${notification.projectId}")
            
            val result = notificationRepository.createNotification(notification)
            
            result.onSuccess { notificationId ->
                Log.d("NotificationService", "‚úÖ Notification created successfully: $notificationId")
            }.onFailure { error ->
                Log.e("NotificationService", "‚ùå Failed to create notification: ${error.message}")
            }
            
            // Convert Result<String> to Result<Unit>
            if (result.isSuccess) {
                Result.success(Unit)
            } else {
                Result.failure(result.exceptionOrNull() ?: Exception("Unknown error"))
            }
        } catch (e: Exception) {
            Log.e("NotificationService", "‚ùå Error sending notification: ${e.message}")
            Result.failure(e)
        }
    }
} 